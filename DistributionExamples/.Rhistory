x <- seq(0, 15, 1)
students <- seq(1, 150, 1)
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
multivariatDistribution <- function(n, mu = rep(0, n), sigma = rep(1, n)) {
# Create a list to save all distributions
distributions <- vector(mode="list", n)
# Calculate n normal distributions and divide each by n
for (i in 1:n) {
distributions[[i]] <- normalDistribution(1:courses, mu[i], sigma[i])/n
}
# Return the sum of the distributions
return(sum(distributions))
}
uniformPreferences <- as.list(data.frame(t(uni)))
for (i in 1:numberStudents) {
#<- sample(1:courses, courses, prob = uniformProbability)
normalPreferences[[i]] <- sample(1:courses, courses, prob = normalProbability)
multivariatPreferences[[i]] <- sample(1:courses, courses, prob = multivariatProbability)
uni[i, ] <- sample(1:courses, courses, prob = uniformProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
}
uniformPreferences <- as.list(data.frame(t(uni)))
normalProbability <- normalDistribution(1:courses, sigma = 2)
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
normalProbability <- normalDistribution(1:courses, sigma = 2)
uniformProbability <- rep(1/courses, courses)
uniformPreferences <- vector(mode="list", length=numberStudents)
normalPreferences <- vector(mode="list", length=numberStudents)
multivariatPreferences <- vector(mode="list", length=numberStudents)
for (i in 1:numberStudents) {
# uniformPreferences[[i]] <- sample(1:courses, courses, prob = uniformProbability)
# normalPreferences[[i]] <- sample(1:courses, courses, prob = normalProbability)
# multivariatPreferences[[i]] <- sample(1:courses, courses, prob = multivariatProbability)
uni[i, ] <- sample(1:courses, courses, prob = uniformProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
multi[i, ] <- sample(1:courses, courses, prob = multivariatProbability)
}
uniformPreferences <- as.list(data.frame(t(uni)))
normalPreferences <- as.list(data.frame(t(normal)))
for (i in 1:numberStudents) {
# uniformPreferences[[i]] <- sample(1:courses, courses, prob = uniformProbability)
# normalPreferences[[i]] <- sample(1:courses, courses, prob = normalProbability)
# multivariatPreferences[[i]] <- sample(1:courses, courses, prob = multivariatProbability)
uni[i, ] <- sample(1:courses, courses, prob = uniformProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
multi[i, ] <- sample(1:courses, courses, prob = multivariatProbability)
}
for (i in 1:numberStudents) {
# uniformPreferences[[i]] <- sample(1:courses, courses, prob = uniformProbability)
# normalPreferences[[i]] <- sample(1:courses, courses, prob = normalProbability)
# multivariatPreferences[[i]] <- sample(1:courses, courses, prob = multivariatProbability)
uni[i, ] <- sample(1:courses, courses, prob = uniformProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
#multi[i, ] <- sample(1:courses, courses, prob = multivariatProbability)
}
for (i in 1:numberStudents) {
# uniformPreferences[[i]] <- sample(1:courses, courses, prob = uniformProbability)
# normalPreferences[[i]] <- sample(1:courses, courses, prob = normalProbability)
# multivariatPreferences[[i]] <- sample(1:courses, courses, prob = multivariatProbability)
uni[i, ] <- sample(1:courses, courses, prob = uniformProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
#multi[i, ] <- sample(1:courses, courses, prob = multivariatProbability)
}
uni <- matrix(0, nrow = numberStudents, ncol = courses)
normal <- matrix(0, nrow = numberStudents, ncol = courses)
multi <- matrix(0, nrow = numberStudents, ncol = courses)
for (i in 1:numberStudents) {
# uniformPreferences[[i]] <- sample(1:courses, courses, prob = uniformProbability)
# normalPreferences[[i]] <- sample(1:courses, courses, prob = normalProbability)
# multivariatPreferences[[i]] <- sample(1:courses, courses, prob = multivariatProbability)
uni[i, ] <- sample(1:courses, courses, prob = uniformProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
#multi[i, ] <- sample(1:courses, courses, prob = multivariatProbability)
}
uniformPreferences <- as.list(data.frame(t(uni)))
normalPreferences <- as.list(data.frame(t(normal)))
View(normal)
View(normalPreferences)
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
######
# Set working directory + Libraries
######
setwd("C:\\Users\\Greifvogel\\Programming\\Git\\BWolf\\DistributionExamples")
library(RJSONIO)
######
# Constants
######
# Number of courses
courses <- 10
# Number of Students
numberStudents <- 1500
######
# Helper
######
# Aggregates all values of the provided list of lists
aggregationMatrix <- function(listOfLists) {
# Initialize matrix
aggregation <- matrix(0, nrow = courses, ncol = courses)
# For every student's preference list
for (studentPref in listOfLists) {
# Get the index of the preference
indexCourse <- 1
# For every preference in a student's preference list
for (pref in studentPref) {
# Increment the preference at the course by one
aggregation[pref,indexCourse] <- aggregation[pref,indexCourse] + 1
# Increment the course index
indexCourse <- indexCourse + 1
}
}
# Return the matrix
return(aggregation)
}
######
# Density functions
######
# Calculates the normal distribution for x points
normalDistribution <- function(x, mu = (length(x)+1)/2, sigma = 1) {
prefactor <- 1/sqrt(2*pi*(sigma^2))
exponent <- - (x - mu)^2 / (2*sigma^2)
return(prefactor * exp(exponent))
}
# Calculates a multivariat distribution for n normal distributions
multivariatDistribution <- function(n, mu = rep(0, n), sigma = rep(1, n)) {
# Create a list to save all distributions
distributions <- rep(0, courses)
# Calculate n normal distributions and divide each by n
for (i in 1:n) {
distributions <- distributions + normalDistribution(1:courses, mu[i], sigma[i])/n
}
# Return the sum of the distributions
return(sum(distributions))
}
######
# Probabilities
######
normalProbability <- normalDistribution(1:courses, sigma = 2)
uniformProbability <- rep(1/courses, courses)
multivariatProbability <- multivariatDistribution(3, mu = c(1, 5, 7), sigma = c(2, 3, 2))
# Courses are columns, Students are rows
uniformPreferences <- vector(mode="list", length=numberStudents)
normalPreferences <- vector(mode="list", length=numberStudents)
multivariatPreferences <- vector(mode="list", length=numberStudents)
uni <- matrix(0, nrow = numberStudents, ncol = courses)
normal <- matrix(0, nrow = numberStudents, ncol = courses)
multi <- matrix(0, nrow = numberStudents, ncol = courses)
for (i in 1:numberStudents) {
uni[i, ] <- sample(1:courses, courses, prob = uniformProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
multi[i, ] <- sample(1:courses, courses, prob = multivariatProbability)
}
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
debugSource('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
distributions
debugSource('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
multivariatProbability
multivariatProbability * 100
multivariatProbability * 10
View(multivariatPreferences)
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
for (i in 1:numberStudents) {
uni[i, ] <- sample(1:courses, courses, prob = uniformProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
multi[i, ] <- sample(1:courses, courses, prob = multivariatProbability)
}
uni[i, ] <- sample(1:courses, courses, prob = uniformProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
normal[i, ] <- sample(1:courses, courses, prob = normalProbability)
multi[i, ] <- sample(1:courses, courses, prob = multivariatProbability)
multivariatProbability
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
multivariatProbability * 10
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
barplot(t(aggregationMatrix(uniformPreferences)))
barplot(t(aggregationMatrix(normalPreferences)))
barplot(t(aggregationMatrix(multivariatPreferences)))
barplot(t(aggregationMatrix(multivariatPreferences)))
source('C:/Users/Greifvogel/Programming/Git/BWolf/DistributionExamples/distributionScript.R')
library(readr)
aggregatedMultiPref <- read_csv("~/Dokumente/Master/3. Fachsemester/Software Entwicklungs-Projekt I/repo2/BWolf/DistributionExamples/aggregatedMultiPref.csv")
View(aggregatedMultiPref)
barplot(t(aggregationMatrix(uniformPreferences)))
exportJson <- toJSON(uniformPreferences)
source('~/Dokumente/Master/3. Fachsemester/Software Entwicklungs-Projekt I/repo2/BWolf/DistributionExamples/distributionScript.R', echo=TRUE)
library(RJSONIO)
?RJSONIO
??RJSONIO
barplot(t(aggregationMatrix(uniformPreferences)))
barplot(t(aggregationMatrix(normalPreferences)))
barplot(t(aggregationMatrix(multivariatPreferences)))
